#include <Arial14.h>
#include <Arial_black_16.h>
#include <Arial_Black_16_ISO_8859_1.h>
#include <DMD.h>
#include <SystemFont5x7.h>

#include <SPI.h>        //SPI.h must be included as DMD is written by SPI (the IDE complains otherwise)      //
#include <TimerOne.h>   //
#include "SystemFont5x7.h"
#include "Arial_black_16.h"

//Fire up the DMD library as dmd
#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);


int maxPeople = 5;
int sensitivity = 5;
//-------------------------------------------------

int currentPeople = 0;

int sensor1[] = {5, 4};
int sensor2[] = {3, 2};
int sensor1Initial;
int sensor2Initial;

String sequence = "";
String inString = "";

int timeoutCounter = 0;


void ScanDMD()
{
  dmd.scanDisplayBySPI();
}

void setup() {
  //Setup code
  Serial.begin(9600);
  Timer1.initialize(5000);           //period in microseconds to call ScanDMD. Anything longer than 5000 (5ms) and you can see flicker.
  Timer1.attachInterrupt(ScanDMD);   //attach the Timer1 interrupt to ScanDMD which goes to dmd.scanDisplayBySPI()

  //clear/init the DMD pixels held in RAM
  dmd.clearScreen(true);

  delay(500);
  sensor1Initial = measureDistance(sensor1);
  sensor2Initial = measureDistance(sensor2);
}

void loop() {
  //Read ultrasonic sensors
  int sensor1Val = measureDistance(sensor1);
  int sensor2Val = measureDistance(sensor2);

  //Process the data
  if (sensor1Val < sensor1Initial && sensor1Val < 20 && sequence.charAt(0) != '1') {
    sequence += "1";
  } else if (sensor2Val < sensor2Initial && sensor2Val < 20 && sequence.charAt(0) != '2') {
    sequence += "2";
  }

  if (sequence.equals("12")) {
    currentPeople++;
    sequence = "";
    delay(550);
  } else if (sequence.equals("21") && currentPeople > 0) {
    currentPeople--;
    sequence = "";
    delay(550);
  }

  //Resets the sequence if it is invalid or timeouts
  if (sequence.length() > 2 || sequence.equals("11") || sequence.equals("22") || timeoutCounter > 200) {
    sequence = "";
  }

  if (sequence.length() == 1) { //
    timeoutCounter++;
  } else {
    timeoutCounter = 0;
  }

  //Print values to serial
  Serial.print("Seq: ");
  Serial.print(sequence);
  Serial.print(" S1: ");
  Serial.print(sensor1Val);
  Serial.print(" S2: ");
  Serial.println(sensor2Val);
  Serial.println(currentPeople);

  inString = String(currentPeople);

  dmd.clearScreen(true);
  dmd.selectFont(System5x7);
  for (byte x = 0; x < DISPLAYS_ACROSS; x++) {
    for (byte y = 0; y < DISPLAYS_DOWN; y++) {
      dmd.drawString(2 + (32 * x), 1 + (16 * y), inString.c_str(), 5, GRAPHICS_NORMAL);

    }
  }
  delay(2000);

}

//Returns the distance of the ultr
